en este c√≥digo obtenemos la fecha y la ubicaci√≥n donde se hizo una foto. Los tag_id son cadena de caracteres, pero los tab_id de las fotos en realidad son n√∫meros, concretamente el [34853] del 1 al 4 para las coordenadas, y el [34853][29] para la fecha. Como puedo cambiar el c√≥digo para obtener esos datos de los tag_id correctos: def obtener_datos_exif(imagen_path): try: imagen = Image.open(imagen_path) exif_data = imagen._getexif() gps_info = {} fecha = None if exif_data: for tag_id, valor in exif_data.items(): tag = TAGS.get(tag_id, tag_id) if tag == 'DateTimeOriginal': fecha = datetime.strptime(valor, '%Y:%m:%d %H:%M:%S') elif tag == 'GPSInfo': for key in valor: sub_tag = GPSTAGS.get(key, key) gps_info[sub_tag] = valor[key] return gps_info, fecha except: return {}, None def obtener_ubicaci√≥n(gps_info): try: lat = convertir_a_grados(gps_info['GPSLatitude']) lon = convertir_a_grados(gps_info['GPSLongitude']) if gps_info['GPSLatitudeRef'] != 'N': lat = -lat if gps_info['GPSLongitudeRef'] != 'E': lon = -lon ubicacion = geolocalizador.reverse((lat, lon), language='es') if ubicacion: partes = ubicacion.address.split(', ') ciudad = partes[0] pais = partes[-1] return f'{ciudad}_{pais}' except: pass return 'Sin_GPS'
Gracias por explicarlo tan bien, Jes√∫s. Lo que est√°s buscando es acceder directamente a los valores EXIF por sus IDs num√©ricos, en lugar de usar los nombres como 'DateTimeOriginal' o 'GPSInfo'. Esto tiene sentido si ya sabes que:

34853 es el ID de GPSInfo

36867 es el ID de DateTimeOriginal

Dentro de GPSInfo, los sub-IDs relevantes son:

1: 'GPSLatitudeRef'

2: 'GPSLatitude'

3: 'GPSLongitudeRef'

4: 'GPSLongitude'

29: 'GPSDateStamp' (fecha sin hora)

‚úÖ Versi√≥n modificada del c√≥digo usando los IDs directamente
python
from PIL import Image
from datetime import datetime

def obtener_datos_exif(imagen_path):
    try:
        imagen = Image.open(imagen_path)
        exif_data = imagen._getexif()
        gps_info = {}
        fecha = None

        if exif_data:
            # Obtener fecha original por ID 36867
            if 36867 in exif_data:
                fecha_str = exif_data[36867]  # '2025:09:21 10:15:11'
                fecha = datetime.strptime(fecha_str, '%Y:%m:%d %H:%M:%S')

            # Obtener GPSInfo por ID 34853
            if 34853 in exif_data:
                gps_raw = exif_data[34853]
                gps_info = {
                    'GPSLatitudeRef': gps_raw.get(1),
                    'GPSLatitude': gps_raw.get(2),
                    'GPSLongitudeRef': gps_raw.get(3),
                    'GPSLongitude': gps_raw.get(4),
                    'GPSDateStamp': gps_raw.get(29)
                }

        return gps_info, fecha
    except Exception as e:
        print(f'Error al leer EXIF: {e}')
        return {}, None
üß≠ ¬øQu√© ventajas tiene?
Accedes directamente a los datos sin depender de TAGS o GPSTAGS.

Evitas errores si el nombre del tag no est√° bien mapeado.

Puedes trabajar con los subcampos GPS como gps_raw[2] sin necesidad de traducir.

¬øQuieres que te ayude a integrar esto con tu script de clasificaci√≥n o que guarde la fecha y ubicaci√≥n en el nombre del archivo o en un CSV? Tambi√©n podemos usar GPSDateStamp si la imagen no tiene DateTimeOriginal.